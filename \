use std::net::SocketAddr;
use async_mutex::Mutex;
use tokio_tungstenite::{WebSocketStream};
use futures_util::SinkExt;
use tokio::sync::broadcast;
use futures_util::StreamExt;
use axum::{
    extract::{ws::{Message, WebSocket, WebSocketUpgrade}, State},
    response::IntoResponse,
    routing::get,
    Router,
};
use std::sync::Arc;
use lazy_static::lazy_static;
struct SharedState {
    frame_buffer:Mutex<Option<Vec<u8>>>
}
#[tokio::main]
async fn main() {
    let app_state = Arc::new(SharedState {
        frame_buffer:Mutex::new(None)
    });

    let app = Router::new()
        .route("/ws",get(ws_handler))
        .route("/ws/frames",get(frames_ws_handler))
        .with_state(app_state);
    let addr = SocketAddr::from(([127,0,0,1],6969));
    println!("listening on address {}",&addr);
    axum::Server::bind(&addr)
        .serve(app.into_make_service_with_connect_info::<SocketAddr>())
        .await.unwrap();
}
async fn ws_handler(ws:WebSocketUpgrade,State(state):State<Arc<SharedState>>) -> impl IntoResponse{
    ws.on_upgrade(move |socket| handle_socket(socket,state))
}

async fn frames_ws_handler(ws:WebSocketUpgrade,State(state):State<Arc<SharedState>>) -> impl IntoResponse{
    ws.on_upgrade(move |socket| frames_socket(socket,state))
}

async fn frames_socket(mut socket:WebSocket,state:Arc<SharedState>) {
    loop {
       let buffer = state.frame_buffer.lock().await;
       if socket.send(Message::Binary(buffer.to_vec())).await.is_err() {continue;}
    }
}
async fn handle_socket(socket:WebSocket,state:Arc<SharedState>) {
    let (mut writer, mut reader) = socket.split();
    while let Some(o) = reader.next().await {
        if let Ok(o) = o {
            match o {
                Message::Text(text) => {
                    println!("set text");
                    // *state.frame_buffer.lock().await = Some(text);
                },
                Message::Binary(bin) => {
                    println!("set data");
                    *state.frame_buffer.lock().await = Some(bin);
                },
                Message::Ping(_) => {
                    println!("Ping")
                },
                Message::Pong(_) => {
                    println!("Pong")
                },
                Message::Close(_) => {
                    return;
                },
            }
            let msg = Arc::clone(&MSG);
            let bin = Arc::clone(&BIN);
            if msg.lock().await.is_some() {
                let m = msg.lock().await; 
                // state.sender.send(m.as_ref().unwrap().to_string()).await.unwrap();
            }
            if bin.lock().await.is_some() {
                let b = bin.lock().await; 
                let binary = b.as_ref().unwrap().to_vec();
            }
        } else {
            return;
        } 
    } 
    // let mut rx = state.sender.subscribe();
    // let mut send_task = tokio::spawn(async move {
    //     while let Ok(o) = rx.recv().await {

    //     }
    // });
}
